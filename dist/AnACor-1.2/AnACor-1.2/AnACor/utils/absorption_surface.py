from dxtbx.serialize import loadfrom dials.array_family import flexfrom dials.algorithms.scaling.scaling_utilities import calc_crystal_frame_vectorsfrom dials.algorithms.scaling.model.model import model_phil_scopefrom dials.algorithms.scaling.plots import plot_absorption_plotsimport pdbimport jsonfrom dials.algorithms.scaling.observers import  make_scaling_model_plotsimport  argparseparser = argparse.ArgumentParser(description="putting corrected values files into flex files")parser.add_argument(    "--save-number",    type=str,    default=0,    help="save-dir for stacking",)parser.add_argument(    "--save-dir",    type=str,    default="./",    help="save-dir for stacking",)parser.add_argument(    "--dataset",    type=str,    default=0,    help="the name of the dataset",)parser.add_argument(    "--refl-filename",    type=str,    required=True,    help="save-dir for stacking",)parser.add_argument(    "--expt-filename",    type=str,    required=True,    help="save-dir for stacking",)parser.add_argument(    "--var",    type=str,    default="acsh",    help="save-dir for stacking",)global argsargs = parser.parse_args()refl_file=args.refl_filenameexpt_file=args.expt_filenamerefls = flex.reflection_table.from_file(refl_file)expt = load.experiment_list(expt_file, check_format=False)[0]refls = calc_crystal_frame_vectors(refls, expt)expt.scaling_model.configure_components(refls, expt, model_phil_scope.extract())for c in expt.scaling_model.components.values():     c.update_reflection_data()plot_data = plot_absorption_plots(expt.scaling_model, refls)expt = load.experiment_list("scaled.expt", check_format=False)#plots = make_scaling_model_plots(expt, refls)undiffract=plot_data['undiffracted_absorption_surface']surface = plot_data['absorption_surface']undiffract_data=undiffract['data']surface_data=surface['data']with open('{}_surface_{}_data.json'.format(args.dataset,args.var), 'w') as f1:    json.dump(surface_data, f1)with open('{}_undiffracted_{}_data.json'.format(args.dataset,args.var), 'w') as fp:    json.dump(undiffract_data, fp)